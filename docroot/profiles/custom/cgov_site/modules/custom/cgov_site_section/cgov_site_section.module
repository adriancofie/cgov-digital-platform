<?php

/**
 * @file
 * The Cgov Site Section module file.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\cgov_site_section\FieldStorageDefinition;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_entity_field_storage_info().
 */
function cgov_site_section_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'taxonomy_term') {
    $definitions['computed_path'] = FieldStorageDefinition::create('string')
      ->setName('computed_path')
      ->setLabel(t('A custom computed site section field'))
      ->setTargetEntityTypeId($entity_type->id());
    return $definitions;
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function cgov_site_section_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  if ($entity_type->id() === 'taxonomy_term' && $bundle === 'cgov_site_sections') {
    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $custom_bundle_field_storage */
    $custom_bundle_field_storage = cgov_site_section_entity_field_storage_info($entity_type)['computed_path'];
    $definitions[$custom_bundle_field_storage->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_bundle_field_storage);
    return $definitions;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Prior to saving a taxonomy term, this sets the value for the psuedo computed
 * field 'computed_path'. 'computed_path' consists of the parents terms path
 *  and this terms Pretty URL Field.
 */
function cgov_site_section_taxonomy_term_presave(EntityInterface $entity) {
  // Only do the following for site sections.
  if ($entity->bundle() !== 'cgov_site_sections') {
    return;
  }

  // Convert the URL to lowercase as we only want lowercased items and
  // the server is case-sensitive.
  if ($entity->hasField('field_pretty_url') && !empty($entity->get('field_pretty_url'))) {
    $field_pretty_url = $entity->get('field_pretty_url')->value;
    $entity->set('field_pretty_url', strtolower($field_pretty_url));
  }

  // Calculate and set the compute_path field.
  // TODO: Only recalculate path if parent or pretty url changed.
  // Assume one parent. Sections cannot be multiple places.
  $parent_tid = $entity->get('parent')->target_id;

  $parent_path = '/';
  // Unless it is TID 0 (the root), let's get the parents computed path.
  if ($parent_tid != 0) {
    try {
      $parent_entity = Term::load($parent_tid);
      $parent_path = $parent_entity->get('computed_path')->value;
      $parent_langcode = $parent_entity->get('langcode')->value;

      // Set the current entities language field based on it's parent term.
      // Ultimately will override the value set by the user in the form
      // with that of the root taxonomy term.
      $entity->set('langcode', $parent_langcode);
    }
    catch (Exception $e) {
      $parent_path = NULL;
      \Drupal::logger('cgov_site_section')
        ->notice('Could not retrieve computed path for tid: ' . $parent_tid);
    }
  }

  // This is section's "folder name".
  $field_pretty_url = $entity->get('field_pretty_url')->value;

  // Assumption: Only root terms can have empty pretty url.
  $entity->set(
    'computed_path',
    $parent_path === '/' ?
      $parent_path . $field_pretty_url :
      $parent_path . '/' . $field_pretty_url
  );
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function cgov_site_section_entity_update(EntityInterface $entity) {

  $entityType = $entity->getEntityType()->id();

  // If this is a Site Sectiion, invalidate if it meets the criteria for
  // cache tag invalidation.
  if ($entityType === 'taxonomy_term' && $entity->hasField('field_site_section')) {
    if (_will_trigger_cache_tag_invalidation($entity)) {
      invalidate_section_cache_tag($entity);
    }
  }

  /*
   * If this is a node or media item  and has changed its section parent or
   * pretty url name, if it displays in navigation, cascade those changes
   *  to any subsections and pages within those subsections.
   *
   * In the event the section parent has changed, the new section root must
   * also invalidate it's cache tag.
   */

  if ($entity->getEntityTypeId() === 'node' || $entity->getEntityTypeId() === 'media') {
    if ($entity->hasField('field_site_section')) {
      if (_will_trigger_cache_tag_invalidation($entity)) {
        // Get the Section IDs where its a landing page..
        // Note: This could be none.
        $query = \Drupal::entityQuery('taxonomy_term')
          ->condition('vid', 'cgov_site_sections')
          ->condition('field_section_nav_root', 1)
          ->condition('field_landing_page.target_id', $entity->id());

        $tids = $query->execute();
        // For each nav root, invalidate it's cache tag.
        foreach ($tids as $section_root) {
          invalidate_section_cache_tag($section_root);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * If a term has either changed its parent or pretty url name,
 * then we need to cascade those changes to any subsections and
 * pages within those subsections.
 */
function cgov_site_section_taxonomy_term_update(EntityInterface $entity) {

  // Only do this for site sections. In the future if there is
  // a vocabulary in which we attach site_section for managing its node's
  // pretty urls, then that vocabulary needs to do something very similar.
  // BUT not in this module!
  if ($entity->bundle() !== 'cgov_site_sections') {
    return;
  }

  // We only set the front page for English nodes without a parent.
  // NOTE: this does not account for the case when the root becomes a
  // child of another node. It is possible, but the amount of complexity
  // that check would add is not worth it.
  // NOTE2: target_id can be an int and it can be a string.
  if ($entity->parent->target_id == 0 && $entity->langcode->value === 'en') {
    _cgov_site_section_attempt_set_front_page($entity);
  }

  // Save the term children if this term update meets the criteria.
  if (will_trigger_save_children($entity)) {
    save_term_children($entity);
  }
  // Determine if this term update meets the criteria for tag invalidation.
  if (_will_trigger_cache_tag_invalidation($entity)) {
    invalidate_section_cache_tag($entity);
  }

  // TODO: Figure out how to get pathauto to update all the aliases using
  // pathauto. To do it here is A) too slow, and B) fraught with
  // issue regarding workflow and the various entity types we would have to hit.
}

/**
 * Invalidate the cache tag equal to the given Site Sections ID.
 *
 * @param \Drupal\Core\Entity\EntityInterface $site_section_entity
 *   The Site Section to invalidate.
 */
function invalidate_section_cache_tag(EntityInterface $site_section_entity) {
  $section_id = $site_section_entity->id();
  // Get the sections ID and invalidate the cache tag.
  if ($section_id) {
    Cache::invalidateTags(['site_section:' . $section_id]);
  }
}

/**
 * Saves the children of the given Site Section taxonomy term.
 *
 * @param \Drupal\Core\Entity\EntityInterface $updated_section_entity
 *   The site section entity with its pending value updates.
 */
function save_term_children(EntityInterface $updated_section_entity) {
  $term_storage = \Drupal::service('entity_type.manager')
    ->getStorage("taxonomy_term");
  // Update immediate child sections.
  $subsections = $term_storage->loadChildren($updated_section_entity->id(), 'cgov_site_sections');

  // Re-save the sections. This should trigger the presave above with will set
  // the computed_path to the new path.
  foreach ($subsections as $section) {
    $section->save();
  }
}

/**
 * Determines if a section should trigger a re-save of its children terms.
 *
 * @param \Drupal\Core\Entity\EntityInterface $updated_section_entity
 *   The site section entity with its pending value updates.
 *
 * @return bool
 *   A TRUE or FALSE as to whether to trigger a re-save.
 */
function will_trigger_save_children(EntityInterface $updated_section_entity) {

  $fields = [
    'computed_path',
    'parent',
    'field_pretty_url',
    'langcode',
  ];
  return entity_fields_modified($fields, $updated_section_entity);
}

/**
 * Determine if an entity should trigger a cache tag invalidation.
 *
 * Fields which trigger a cache tag invalidation for a section when modified:
 *  name
 *  field_landing_page
 *  field_pretty_url
 *  field_section_nav_root
 *  field_navigation_label
 *  field_navigation_display_options
 *  weight.
 *
 * For a node or media item:
 * field_site_section
 *
 * @param \Drupal\Core\Entity\EntityInterface $updated_entity
 *   The entity just updated.
 *
 * @return bool
 *   A TRUE or FALSE as to whether to trigger a cache clear.
 */
function _will_trigger_cache_tag_invalidation(EntityInterface $updated_entity) {
  $values = [];

  // Invalidation Check For Nodes/Media.
  if ($updated_entity->getEntityTypeId() === 'node' || $updated_entity->getEntityTypeId() === 'media') {
    // Exit early if this entity doesn't have site sections.
    if ($updated_entity->hasField('field_site_section')) {
      return FALSE;
    }
    // Set entity Fields which trigger invalidation when modified.
    $values =
      [
        'field_site_section',
      ];
  }

  // Invalidation Check for Site Sections.
  if ($updated_entity->getEntityTypeId() === 'taxonomy_term' &&
    $updated_entity->bundle() == 'cgov_site_sections') {
    $weightModified = $updated_entity->original->getWeight() !== $updated_entity->getWeight();
    // Early exit if weight modified.
    if ($weightModified) {
      return TRUE;
    }

    // Set Site Section Fields which trigger invalidation.
    $values =
      [
        'name',
        'field_landing_page',
        'field_pretty_url',
        'field_section_nav_root',
        'field_navigation_label',
        'field_navigation_display_options',
      ];
  }
  // Compare the values and check if any have been modified.
  return entity_fields_modified($values, $updated_entity);
}

/**
 * Checks to see if an entities values have changed compared to it's original.
 *
 * @param array $fields
 *   The fields which trigger a cache invalidation.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The updated entity.
 *
 * @return bool
 *   A TRUE or FALSE as to whether the fields were modified.
 */
function entity_fields_modified(array $fields, EntityInterface $entity) {
  // Store the original entity for comparison.
  $original = $entity->original;

  // Setup closures for comparison functions.
  $get_er_value = function ($field_name) use ($entity, $original) {
    // Type-casting since original target ID returns a string instead of a num.
    return (int) $original->get($field_name)->target_id !== $entity->get($field_name)->target_id;
  };
  $get_value = function ($field_name) use ($entity, $original) {
    return $original->get($field_name)->value !== $entity->get($field_name)->value;
  };

  // Loop though the given fields to check for modification.
  foreach ($fields as $field_name) {
    $field_type = $entity->get($field_name)->getFieldDefinition()->getType();

    // Select the function depending on the field type.
    switch ($field_type) {
      case 'entity_reference':
        $wasModified = $get_er_value;
        break;

      default:
        $wasModified = $get_value;
    }

    // If a field has been modified exit and return true.
    if ($wasModified($field_name)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Set the front page if conditions are right.
 *
 * @param \Drupal\Core\Entity\EntityInterface $site_section
 *   The site section.
 */
function _cgov_site_section_attempt_set_front_page(EntityInterface $site_section) {
  /*
   * If it has no landing page, then we need to exit.
   *
   * NOTE: We do not care about its published state as taxonomy does not have
   * workflow yet. So when the landing page is set, then it updates the live
   * site immediately. The assumption is that the home page will be published
   * either before, or right after. If we checked the published state, and
   * skipped updating it if the target was unpublished, then we would have to
   * have an update hook for node checking if it is a landing then updating
   * the section. That is too convoluted.
   */
  $home_page_id = $site_section->field_landing_page->target_id;
  if ($home_page_id === NULL) {
    return;
  }

  // Set the front page.
  $config = \Drupal::configFactory()->getEditable('system.site');
  $front_page = "/node/${home_page_id}";
  // Only save if we need to change it.
  if ($front_page !== $config->get('page.front')) {
    $config->set('page.front', $front_page)->save();
  }
}

/**
 * Implements hook_entity_presave().
 */
function cgov_site_section_entity_presave($entity) {
  // Prior to saving a node, formats the field.
  $entityType = $entity->getEntityType()->id();
  if ($entityType === 'node' || $entityType === 'media') {

    if ($entity->hasField('field_pretty_url') && !empty($entity->get('field_pretty_url'))) {
      $field_pretty_url = $entity->get('field_pretty_url')->value;
      $entity->set('field_pretty_url', strtolower($field_pretty_url));
    }
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Validates that on a node a Site Section and Pretty URL
 * combination will be unique.
 */
function cgov_site_section_entity_type_build(array &$entity_types) {
  // Add our custom validation to the node entity.
  $entity_types['node']->addConstraint('UniqueCgovUrl');
  $entity_types['media']->addConstraint('UniqueCgovUrl');
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Validates that the Pretty URL Field on Nodes and Site Sections
 * matches the required pattern.
 */
function cgov_site_section_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (($entity_type->id() == 'taxonomy_term' || $entity_type->id() == 'node' || $entity_type->id() == 'media') && !empty($fields['field_pretty_url'])) {
    $fields['field_pretty_url']->setPropertyConstraints('value', [
      'Regex' => [
        'pattern' => '/^[\.a-zA-Z0-9-]*$/',
        'message' => 'The Pretty URL field only accepts letters, numbers, and dashes.',
      ],
    ]
    );
  }
}

/**
 * Implements hook_views_data().
 *
 * This allows us to use the computed_path field in views.
 */
function cgov_site_section_views_data() {
  $data = [];

  // The outermost keys of $data are Views table names, which should usually
  // be the same as the hook_schema() table names.
  $data['taxonomy_term__computed_path'] = [];
  $data['taxonomy_term__computed_path']['table']['group'] = t('Cgov Site Section');
  $data['taxonomy_term__computed_path']['table']['join'] = [
    // Within the 'join' section, list one or more tables to automatically
    // join to. In this example, every time 'node_field_data' is available in
    // a view, 'example_table' will be too. The array keys here are the array
    // keys for the other tables, given in their hook_views_data()
    // implementations. If the table listed here is from another module's
    // hook_views_data() implementation, make sure your module depends on that
    // other module.
    'taxonomy_term_field_data' => [
      // Primary key field in <entity>_field_data to use in the join.
      'left_field' => 'tid',
      // Primary key field in our custom field table to use in the join.
      'field' => 'entity_id',
    ],
  ];
  // Our custom computed path field, exposed as a field, sort, filter,
  // and argument.
  $data['taxonomy_term__computed_path']['computed_path_value'] = [
    'title' => t('Computed Path'),
    'help' => t('The computed_path Cgov Site Section field.'),
    'field' => [
      // ID of field handler plugin to use.
      'id' => 'standard',
    ],
    'sort' => [
      // ID of sort handler plugin to use.
      'id' => 'standard',
    ],
    'filter' => [
      // ID of filter handler plugin to use.
      'id' => 'string',
    ],
    'argument' => [
      // ID of argument handler plugin to use.
      'id' => 'string',
    ],
  ];

  return $data;
}
